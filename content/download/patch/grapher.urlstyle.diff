Append this to your cricket-conf.pl and edit to suit:

#	Pick the style of URL you want Cricket to use when generating
#	self-referencing URLs (either URL's to targets, or URL's to
#	graphed images).
#	It is recommended not to touch this unless you need to.
$gUrlStyle="classic";    # What Cricket before 1.0.4 did.
#$gUrlStyle="relative";  # Required if Cricket sits behind a reverse proxy
#$gUrlStyle="pathinfo";  # Encode the target in the URL path for authentication

Index: grapher.cgi
===================================================================
RCS file: /cvsroot/cricket/cricket/grapher.cgi,v
retrieving revision 1.37
diff -c -r1.37 grapher.cgi
*** grapher.cgi	24 Mar 2002 23:37:38 -0000	1.37
--- grapher.cgi	27 Mar 2002 00:43:27 -0000
***************
*** 73,78 ****
--- 73,98 ----
  
  $gPollingInterval = 5 * 60;     # defaults to 5 minutes
  
+ # Determine which URL style to use. Classic uses self_url, which creates
+ # new URL's by parrotting the own URL with modifications. Relative only
+ # uses the bits after the last slash in the URL, which makes URL's
+ # shorter and eases proxying. Both pass the target name in a URL parameter.
+ # Pathinfo passes the target as path components after the CGI name,
+ # which makes life easier for folks using Apache "Location" access
+ # restrictions. And they all have their drawbacks too. Pick one.
+ $Common::global::gUrlStyle ||= "classic";
+ my $gUseSelfUrl = 0;
+ my $gUseRelativeUrl = 0;
+ my $gUsePathInfo = 0;
+ if ($Common::global::gUrlStyle eq "pathinfo") {
+     $gUsePathInfo = 1;
+ } elsif ($Common::global::gUrlStyle eq "relative") {
+     $gUseRelativeUrl = 1;
+ } else {
+     $gUseSelfUrl = 1;
+ }
+ 
+ 
  $gQ = new CGI;
  
  fixHome($gQ);
***************
*** 107,113 ****
  sub doHTMLPage {
      my($ct) = $gCT;
  
!     my($name) = $gQ->param('target');
  
      $name = "/" if (! $name);
  
--- 127,133 ----
  sub doHTMLPage {
      my($ct) = $gCT;
  
!     my($name) = urlTarget($gQ);
  
      $name = "/" if (! $name);
  
***************
*** 196,202 ****
                  }
  
                  $gQ->param('inst', $inst);
!                 my($me) = $gQ->self_url();
  
                  my($link) = "<a href=\"$me\">$text</a> ";
  
--- 216,222 ----
                  }
  
                  $gQ->param('inst', $inst);
!                 my($me) = makeUrl($gQ);
  
                  my($link) = "<a href=\"$me\">$text</a> ";
  
***************
*** 452,463 ****
  
                          $gQ->delete_all();
                          $gQ->param('ranges', 'd:w');
!                         $gQ->param('target', $thisTarget2);
                          $gQ->param('inst', $thisInst) if (defined($thisInst));
                          if (defined($view))  {
                              $gQ->param('view', $view);
                          }
!                         $linkurl = $gQ->self_url();
  
                          print "<a href=\"$linkurl\">";
  
--- 472,483 ----
  
                          $gQ->delete_all();
                          $gQ->param('ranges', 'd:w');
!                         urlTarget($gQ, $thisTarget2);
                          $gQ->param('inst', $thisInst) if (defined($thisInst));
                          if (defined($view))  {
                              $gQ->param('view', $view);
                          }
!                         $linkurl = makeUrl($gQ);
  
                          print "<a href=\"$linkurl\">";
  
***************
*** 524,530 ****
  
                      $gQ->delete_all();
                      $gQ->param('type', $format);
!                     $gQ->param('target', $thisTarget2);
                      $gQ->param('inst', $thisInst) if defined($thisInst);
  
                      $gQ->param('dslist', $dslist);
--- 544,550 ----
  
                      $gQ->delete_all();
                      $gQ->param('type', $format);
!                     urlTarget($gQ, $thisTarget2);
                      $gQ->param('inst', $thisInst) if defined($thisInst);
  
                      $gQ->param('dslist', $dslist);
***************
*** 540,546 ****
                      # pass thru the value of the cache param, if given
                      $gQ->param('cache', $cache) if (defined($cache));
  
!                     my($me) = $gQ->self_url();
                      if (! $ENV{'MOD_PERL'}) {
                          $me =~ s/grapher\.cgi/mini-graph\.cgi/;
                      }
--- 560,566 ----
                      # pass thru the value of the cache param, if given
                      $gQ->param('cache', $cache) if (defined($cache));
  
!                     my($me) = makeUrl($gQ);
                      if (! $ENV{'MOD_PERL'}) {
                          $me =~ s/grapher\.cgi/mini-graph\.cgi/;
                      }
***************
*** 678,684 ****
                  # first, reset the target parameter for the coming
                  # links.
                  my($newTarg) = "$name/$item";
!                 $gQ->param('target', $newTarg);
  
                  my($itemName) = $item;
                  if (defined($targs->{$item}->{'display-name'})) {
--- 698,704 ----
                  # first, reset the target parameter for the coming
                  # links.
                  my($newTarg) = "$name/$item";
!                 urlTarget($gQ, $newTarg);
  
                  my($itemName) = $item;
                  if (defined($targs->{$item}->{'display-name'})) {
***************
*** 730,736 ****
  
                          # put it in just long enough to get a URL out
                          $gQ->param('view', $vname);
!                         my($me) = $gQ->self_url();
                          $gQ->delete('view');
  
                          $links .= "<a href=\"$me\">[&nbsp;$vname&nbsp;]</a>\n";
--- 750,756 ----
  
                          # put it in just long enough to get a URL out
                          $gQ->param('view', $vname);
!                         my($me) = makeUrl($gQ);
                          $gQ->delete('view');
  
                          $links .= "<a href=\"$me\">[&nbsp;$vname&nbsp;]</a>\n";
***************
*** 739,745 ****
                      print "<tr><td>$itemName<br>" .
                          "&nbsp;&nbsp;&nbsp;\n$links</td>\n";
                  } else {
!                     my($me) = $gQ->self_url();
  
                      my($link) = "<a href=\"$me\">$itemName</a>";
                      print "<tr><td>$link</td>\n";
--- 759,765 ----
                      print "<tr><td>$itemName<br>" .
                          "&nbsp;&nbsp;&nbsp;\n$links</td>\n";
                  } else {
!                     my($me) = makeUrl($gQ);
  
                      my($link) = "<a href=\"$me\">$itemName</a>";
                      print "<tr><td>$link</td>\n";
***************
*** 769,776 ****
                  my($newTarg) = "$name/$item";
                  $newTarg =~ s#^\/\/#\/#;
  
!                 $gQ->param('target', $newTarg);
!                 my($me) = $gQ->self_url();
  
                  my($link) = "<a href=\"$me\">$item</a>";
                  print "<tr><td>$link</td><td>$desc</td></tr>\n";
--- 789,796 ----
                  my($newTarg) = "$name/$item";
                  $newTarg =~ s#^\/\/#\/#;
  
!                 urlTarget($gQ, $newTarg);
!                 my($me) = makeUrl($gQ);
  
                  my($link) = "<a href=\"$me\">$item</a>";
                  print "<tr><td>$link</td><td>$desc</td></tr>\n";
***************
*** 1200,1206 ****
          return;
      }
  
!     my($name) = $gQ->param('target');
  
      if (! defined($name)) {
          Die("No target given.");
--- 1220,1226 ----
          return;
      }
  
!     my($name) = urlTarget($gQ);
  
      if (! defined($name)) {
          Die("No target given.");
***************
*** 1920,1926 ****
      my($i) = 0;
      foreach $r (@r) {
          $gQ->param('ranges', $r[$i]);
!         my($me) = $gQ->self_url();
          if (defined($reqRanges) && $reqRanges eq $r[$i]) {
              push @links, "[ $rName[$i] ]&nbsp;&nbsp;&nbsp;";
          } else {
--- 1940,1946 ----
      my($i) = 0;
      foreach $r (@r) {
          $gQ->param('ranges', $r[$i]);
!         my($me) = makeUrl($gQ);
          if (defined($reqRanges) && $reqRanges eq $r[$i]) {
              push @links, "[ $rName[$i] ]&nbsp;&nbsp;&nbsp;";
          } else {
***************
*** 1957,1966 ****
          my($lQ) = new CGI;
          $path .= "$p";
          $lQ->delete_all() unless ($ct->isLeaf($path));
!         $lQ->param('target', $path);
          $p .= "/" unless ($p =~ /\/$/) || ($ct->isLeaf($path));
          $path .= "/" unless $path =~ /\/$/;
!         $html .= " <a href=\"" . $lQ->self_url() . "\">" . $p . "</a>\n";
      }
  
      return $html;
--- 1977,1986 ----
          my($lQ) = new CGI;
          $path .= "$p";
          $lQ->delete_all() unless ($ct->isLeaf($path));
!         urlTarget($lQ, $path);
          $p .= "/" unless ($p =~ /\/$/) || ($ct->isLeaf($path));
          $path .= "/" unless $path =~ /\/$/;
!         $html .= " <a href=\"" . makeUrl($lQ) . "\">" . $p . "</a>\n";
      }
  
      return $html;
***************
*** 1972,1986 ****
      my ($localurl);
      $gQ->param('ranges','d');
      $gQ->param('hw','confidence');
!     $localurl = $gQ->self_url();
      push @links, "<a href=\"$localurl\">Confidence Bounds</a>" .
          "&nbsp;&nbsp;&nbsp;";
      $gQ->param('hw','failures');
!     $localurl = $gQ->self_url();
      push @links, "<a href=\"$localurl\">Failures</a>" .
          "&nbsp;&nbsp;&nbsp;";
      $gQ->param('hw','all');
!     $localurl = $gQ->self_url();
      push @links, "<a href=\"$localurl\">Confidence Bounds and Failures</a>" .
          "&nbsp;&nbsp;&nbsp;";
      $gQ->delete('hw');
--- 1992,2006 ----
      my ($localurl);
      $gQ->param('ranges','d');
      $gQ->param('hw','confidence');
!     $localurl = makeUrl($gQ);
      push @links, "<a href=\"$localurl\">Confidence Bounds</a>" .
          "&nbsp;&nbsp;&nbsp;";
      $gQ->param('hw','failures');
!     $localurl = makeUrl($gQ);
      push @links, "<a href=\"$localurl\">Failures</a>" .
          "&nbsp;&nbsp;&nbsp;";
      $gQ->param('hw','all');
!     $localurl = makeUrl($gQ);
      push @links, "<a href=\"$localurl\">Confidence Bounds and Failures</a>" .
          "&nbsp;&nbsp;&nbsp;";
      $gQ->delete('hw');
***************
*** 2128,2133 ****
--- 2148,2177 ----
          $value = sprintf("%0.${precision}f", $value);
      }
      return "$value$space$prefix$unit";
+ }
+ 
+ # Return a URL as a text string, based on the current state of the
+ # $cgi object.
+ sub makeUrl {
+     my $cgi = shift;
+     return $cgi->self_url() if $gUseSelfUrl;
+     return $cgi->url(-relative=>$gUseRelativeUrl,
+                      -query=>1,
+                      -path_info=>$gUsePathInfo);
+ }
+ 
+ # Get or set the target from the $cgi object.
+ sub urlTarget {
+     my $cgi = shift;
+     my $target = shift;
+     return $cgi->param('target', $target) if !$gUsePathInfo;
+     if (!defined($target)) {
+         $target = $cgi->path_info();
+         $target =~ s/\/+$//;  # Zonk any trailing slashes
+         $target ||= "/";      # but we name the root explicitly
+         return $target;
+     }
+     $cgi->path_info($target);
  }
  
  # Local Variables:
